diff --ruN a/stablehlo/stablehlo/dialect/CMakeLists.txt b/stablehlo/stablehlo/dialect/CMakeLists.txt
--- stablehlo/stablehlo/dialect/CMakeLists.txt
+++ stablehlo/stablehlo/dialect/CMakeLists.txt
@@ -106,6 +106,7 @@
   LINK_LIBS PUBLIC
   MLIRInferTypeOpInterface
   MLIRIR
+  StablehloAssemblyFormat
   StablehloBase
 )
 
diff --ruN a/stablehlo/stablehlo/reference/Tensor.cpp b/stablehlo/stablehlo/reference/Tensor.cpp
--- stablehlo/stablehlo/reference/Tensor.cpp
+++ stablehlo/stablehlo/reference/Tensor.cpp
@@ -368,24 +368,25 @@
 
     // For both f16 and bf16 floating-point types, we use uint16_t as their
     // storage type because there are no buitin types for those.
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint16_t>(floatValues));
+    return Tensor(
+        type,
+        HeapAsmResourceBlob::allocateAndCopyInferAlign<uint16_t>(floatValues));
   }
 
   if (elemType.isF32()) {
     auto floatValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APFloat>(),
         [&](APFloat value) -> float { return value.convertToFloat(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<float>(floatValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<float>(
+                            floatValues));
   }
 
   if (elemType.isF64()) {
     auto floatValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APFloat>(),
         [&](APFloat value) -> double { return value.convertToDouble(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<double>(floatValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<double>(
+                            floatValues));
   }
 
   // Handle signed integer types.
@@ -393,32 +394,32 @@
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> int8_t { return value.getSExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<int8_t>(intValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<int8_t>(
+                            intValues));
   }
 
   if (elemType.isSignlessInteger(16)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> int16_t { return value.getSExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<int16_t>(intValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<int16_t>(
+                            intValues));
   }
 
   if (elemType.isSignlessInteger(32)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> int32_t { return value.getSExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<int32_t>(intValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<int32_t>(
+                            intValues));
   }
 
   if (elemType.isSignlessInteger(64)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> int64_t { return value.getSExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<int64_t>(intValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<int64_t>(
+                            intValues));
   }
 
   // Handle unsigned integer types.
@@ -426,32 +427,35 @@
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> uint8_t { return value.getZExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint8_t>(intValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<uint8_t>(
+                            intValues));
   }
 
   if (elemType.isUnsignedInteger(16)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> uint16_t { return value.getZExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint16_t>(intValues));
+    return Tensor(
+        type,
+        HeapAsmResourceBlob::allocateAndCopyInferAlign<uint16_t>(intValues));
   }
 
   if (elemType.isUnsignedInteger(32)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> uint32_t { return value.getZExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint32_t>(intValues));
+    return Tensor(
+        type,
+        HeapAsmResourceBlob::allocateAndCopyInferAlign<uint32_t>(intValues));
   }
 
   if (elemType.isUnsignedInteger(64)) {
     auto intValues = llvm::to_vector(llvm::map_range(
         attr.getValues<APInt>(),
         [&](APInt value) -> uint64_t { return value.getZExtValue(); }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint64_t>(intValues));
+    return Tensor(
+        type,
+        HeapAsmResourceBlob::allocateAndCopyInferAlign<uint64_t>(intValues));
   }
 
   // Handle boolean type.
@@ -459,8 +463,8 @@
     auto boolValues = llvm::to_vector(
         llvm::map_range(attr.getValues<bool>(),
                         [&](bool value) -> uint8_t { return value ? 1 : 0; }));
-    return Tensor(type,
-                  HeapAsmResourceBlob::allocateAndCopy<uint8_t>(boolValues));
+    return Tensor(type, HeapAsmResourceBlob::allocateAndCopyInferAlign<uint8_t>(
+                            boolValues));
   }
 
   // Handle complex types.
@@ -473,9 +477,10 @@
             return std::complex<float>(value.real().convertToFloat(),
                                        value.imag().convertToFloat());
           }));
-      return Tensor(type,
-                    HeapAsmResourceBlob::allocateAndCopy<std::complex<float>>(
-                        complexValues));
+      return Tensor(
+          type,
+          HeapAsmResourceBlob::allocateAndCopyInferAlign<std::complex<float>>(
+              complexValues));
     }
     if (complexElemTy.isF64()) {
       auto complexValues = llvm::to_vector(llvm::map_range(
@@ -484,9 +489,10 @@
             return std::complex<double>(value.real().convertToDouble(),
                                         value.imag().convertToDouble());
           }));
-      return Tensor(type,
-                    HeapAsmResourceBlob::allocateAndCopy<std::complex<double>>(
-                        complexValues));
+      return Tensor(
+          type,
+          HeapAsmResourceBlob::allocateAndCopyInferAlign<std::complex<double>>(
+              complexValues));
     }
   }
 
diff --ruN a/stablehlo/stablehlo/tests/CMakeLists.txt b/stablehlo/stablehlo/tests/CMakeLists.txt
--- stablehlo/stablehlo/tests/CMakeLists.txt
+++ stablehlo/stablehlo/tests/CMakeLists.txt
@@ -53,4 +53,5 @@
   MLIRShapeDialect
   MLIRSupport
   MLIRTransformUtils
+  StablehloAssemblyFormat
 )
diff --ruN a/stablehlo/stablehlo/tests/TestUtils.cpp b/stablehlo/stablehlo/tests/TestUtils.cpp
--- stablehlo/stablehlo/tests/TestUtils.cpp
+++ stablehlo/stablehlo/tests/TestUtils.cpp
@@ -36,7 +36,6 @@
 #include "mlir/Support/TypeID.h"
 #include "mlir/Transforms/GreedyPatternRewriteDriver.h"
 #include "stablehlo/dialect/AssemblyFormat.h"
-#include "stablehlo/dialect/Base.h"
 
 namespace mlir {
 namespace hlo {

