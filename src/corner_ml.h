#pragma once

#include <memory>
#include <mutex>
#include <thread>
#include <atomic>
#include <vector>

#include <opencv2/opencv.hpp>

#include "tensorflow/lite/interpreter.h"
#include "tensorflow/lite/kernels/register.h"
#include "tensorflow/lite/model.h"
#include "tensorflow/lite/optional_debug_tools.h"

#include "utils.h"

#define CORNER_IN_WIDTH 160
#define CORNER_IN_HEIGHT 120
#define CORNER_IN_CHANNELS 3

#define CORNER_OUT_WIDTH 32
#define CORNER_OUT_HEIGHT 12
#define CORNER_OUT_CHANNELS 2

#define CORNER_MODEL_PATH "/home/pi/robocup23/runtime_data/corner.tflite"

struct Corner {
    float x;
    float y;
};

class CornerML {
private:
    std::unique_ptr<tflite::FlatBufferModel> model;
    std::unique_ptr<tflite::Interpreter> interpreter;

    float* input_layer;
    float* output_layer;

public:
    CornerML();
    void init();

    /**
     * Invokes the neural net on the input image.
     * Returns a probability map.
     */
    cv::Mat invoke(cv::Mat image);

    /**
     * Extracts corner out of a probability map generated by the
     * neural net using cv::findContours and thresholding operations.
     * x and y will be between 0 and IN_WIDTH or IN_HEIGHT.
     * Returns true if a corner was found, false otherwise.
     * If red is true, this method only finds red corners, if it is false, it will only find green corners.
     */
    bool extract_corner(cv::Mat probability_map, float& x, float& y, bool red);
};